Parameters: 
    ArtifactKeyName: 
        Type: String


Resources:

    CreateAnalyticsFunction:
        Type: "AWS::Lambda::Function"
        Properties: 
            Code:
                S3Bucket: !ImportValue ex-Pipeline-ArtifactBucket
                S3Key: !Ref ArtifactKeyName
            FunctionName: CreateAnalyticsFunction
            Handler: exports.createAnalytics
            MemorySize: 128
            Role: !GetAtt LambdaRole.Arn
            Runtime: nodejs4.3
            Timeout: 60

    StartProxyFunction:
        Type: "AWS::Lambda::Function"
        Properties: 
            Code:
                S3Bucket: !ImportValue ex-Pipeline-ArtifactBucket
                S3Key: !Ref ArtifactKeyName
            FunctionName: StartProxyFunction
            Handler: exports.startProxy
            MemorySize: 128
            Role: !GetAtt LambdaRole.Arn
            Runtime: nodejs4.3
            Timeout: 60

    CreateESindexFunction:
        Type: "AWS::Lambda::Function"
        Properties: 
            Code:
                S3Bucket: !ImportValue ex-Pipeline-ArtifactBucket
                S3Key: !Ref ArtifactKeyName
            FunctionName: CreateESindexFunction
            Handler: exports.createESindex
            MemorySize: 128
            Role: !GetAtt LambdaRole.Arn
            Runtime: nodejs4.3
            Timeout: 60

    LambdaRole:
        Type: "AWS::IAM::Role"
        Properties: 
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                - 
                    Effect: "Allow"
                    Principal: 
                        Service: 
                            - "lambda.amazonaws.com"
                    Action: 
                    - "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/AdministratorAccess" 
            RoleName: "LambdaRole"